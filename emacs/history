;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(counsel-org-link-history magit-revision-history TeX-macro-history LaTeX-environment-history TeX-command-history pdf-annot-color-history Man-topic-history dired-regexp-history shell-command-history custom-variable-history counsel-descbinds-history bookmark-history eww-prompt-history org-agenda-search-history imenu--history-list face-name-history counsel-imenu-history org-capture--prompt-history org-refile-history org-tags-history org-read-date-history org-link--history woman-topic-history read-expression-history empty-history command-history counsel-ibuffer-history minibuffer-history swiper-history tex-compile-history read-number-history buffer-name-history counsel-describe-symbol-history ivy-history file-name-history yes-or-no-p-history counsel-M-x-history evil-ex-history))
(setq counsel-org-link-history '(#("Procress" 0 8 (ivy-index 0)) "Development/Latex/Procress"))
(setq TeX-macro-history '(#("centering" 0 9 (ivy-index 0))))
(setq LaTeX-environment-history '(#("gather*" 0 7 (idx 45 ivy-index 45))))
(setq TeX-command-history '(#("LaTeX" 0 5 (idx 1 ivy-index 1)) #("View" 0 4 (idx 1 ivy-index 1))))
(setq Man-topic-history '(#("mpv" 0 3 (ivy-index 0 idx 12315)) #("zathura" 0 7 (idx 1 ivy-index 1)) #("kitty(1)" 0 8 (help-echo "kitty Documentation" ivy-index 0))))
(setq dired-regexp-history '("\\.org$" "^."))
(setq shell-command-history '("touch org-files/example_html.org" "feh" "/bin/bash"))
(setq custom-variable-history '(#("ivy-prescient-sort-commands" 0 27 (ivy-index 0))))
(setq eww-prompt-history '("test"))
(setq org-agenda-search-history '("help"))
(setq face-name-history '(#("org-document" 0 12 (ivy-index 0)) "org-document-title" #("fixed-pitch-serif" 0 17 (ivy-index 9)) #("variable-pitch" 0 14 (ivy-index 9)) #("org-block" 0 9 (ivy-index 480)) #("org-level-1" 0 11 (ivy-index 435)) #("all-the-icons-dired" 0 19 (ivy-index 0)) "all-the-icons-dired-dir-face" #("doom-modeline" 0 13 (ivy-index 0))))
(setq org-refile-history '(#("Backlog" 0 7 (ivy-index 5 idx 5)) #("Active" 0 6 (ivy-index 4 idx 4)) #("October (Archive.org)" 0 21 (ivy-index 1 idx 0)) #("Active (Tasks.org)" 0 18 (ivy-index 4 idx 3))))
(setq org-tags-history '(#("@work" 0 5 (ivy-index 0)) #("planning" 0 8 (ivy-index 5)) #("hom" 0 3 (ivy-index 0)) "@home" ":life:" #("email" 0 5 (ivy-index 0)) #("life" 0 4 (ivy-index 0))))
(setq org-read-date-history '("done    " "   " "10-31    " "01-06    " "10-31    " "2004-12-26    " "2004-07-13    " "2008    " "    " "   " "    "))
(setq woman-topic-history '(#("mpv" 0 3 (ivy-index 0 idx 12315)) #("zathura" 0 7 (idx 1 ivy-index 1)) #("kitty(1)" 0 8 (help-echo "kitty Documentation" ivy-index 0))))
(setq read-expression-history '("(set-face-attribute 'org-document-title nil :font reiki/default-variable-font :weight 'bold :height 1.3)" "(shell-command \"latexmk -c &\")" "(shell-command \"latexmk -c\"&)" "(shell-command \"latexmk -c\")" "(window-buffer-height)" "(setq org-highlight-latex-and-related '(native))" "(latex-run-command)" "(pdf-tools-install)" "(set-face-attribute 'show-paren-match-expression nil :background \"#363e4a\")" "(setq doom-modeline-major-mode-icon nil)" "(setq doom-modeline-major-mode-icon t)" "(setq doom-modeline-major-mode-icon nil)" "(doom-modeline-major-mode-icon nil)" "(minions-mode 1)" "dired-single-buffer" "'dired-single-buffer" "minimap-major-modes" "(setq fast-but-imprecise-scrolling nil)" "(setq fast-but-imprecise-scrolling t)" "(unless IS_MAC (message \"yeet\"))" "(IS_MAC)" "(calc-eval \"sqrt(-1)\")" "counsel-find-file" "(org-pretty-entities t)" "(switch-to-buffer (other-buffer))"))
(setq command-history '((evil-delete 24200 24262 'line nil nil) (evil-delete 24373 24406 'line nil nil) (evil-replace 24693 24694 'exclusive 110) (evil-replace 24774 24775 'exclusive 112) (evil-replace 24359 24360 'exclusive 111) (evil-replace 24350 24351 'exclusive 119) (evil-yank 24277 24286 'exclusive nil nil) (evil-delete 24533 24564 'line nil nil) (evil-delete 24592 24623 'line nil nil) (evil-yank 25300 25334 'line nil nil) (evil-replace 24656 24657 'exclusive 112) (evil-replace 24737 24738 'exclusive 110) (evil-change 24746 24748 'exclusive nil nil) (evil-delete 24750 24818 'line nil nil) (evil-yank 24608 24679 'line nil nil) (evil-change 24668 24674 'exclusive nil nil) (evil-delete 24608 24644 'line nil nil) (evil-yank 24644 24712 'line nil nil) (evil-change 24694 24697 'exclusive nil nil) (helpful-key "\344") (helpful-key "\364") (evil-yank 24936 25001 'line nil nil) (evil-change 24258 24261 'exclusive nil nil) (evil-change 24253 24259 'exclusive nil nil) (evil-change 24243 24250 'exclusive nil nil)))
(setq counsel-ibuffer-history '(#("     init-new.el             2330 ELisp/d          ~/.config/emacs/init-new.el" 0 78 (idx 2 ivy-index 2)) #("     Emacs.org               2297 Org              ~/.config/emacs/Emacs.org" 0 76 (idx 2 ivy-index 2)) #("     init.el                13206 ELisp/d          ~/.config/emacs/init.el" 0 74 (idx 2 ivy-index 2)) #("     *scratch*                144 Lisp Interaction " 0 51 (idx 3 ivy-index 3)) #("     init.el                13186 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 1 idx 1)) #("     init.el                13109 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 1 idx 1)) #("     Emacs.org               2324 Org              ~/.config/emacs/Emacs.org" 0 76 (idx 1 ivy-index 1)) #("     init.el                13074 ELisp/d          ~/.config/emacs/init.el" 0 74 (idx 2 ivy-index 2)) #("     init.el                12875 ELisp/d          ~/.config/emacs/init.el" 0 74 (idx 2 ivy-index 2)) #("     Habits.org                48 Org              ~/dox/OrgFiles/Habits.org" 0 76 (idx 1 ivy-index 1)) #("     init.el                12844 ELisp/d          ~/.config/emacs/init.el" 0 74 (idx 2 ivy-index 2)) #("     Tasks.org                487 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     init.el                12743 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 1 idx 1)) #("     init.el                12472 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 1 idx 1)) #("     Metrics.org              278 Org              ~/dox/OrgFiles/Metrics.org" 0 77 (ivy-index 1 idx 1)) #("     init.el                12473 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 1 idx 1)) #("     init.el                12476 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 2 idx 2)) #("     Tasks.org<dox>           528 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     Tasks.org<dox>           667 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     Tasks.org<dox>           525 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     Tasks.org<dox>           383 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     Tasks.org<dox>           384 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     init.el                12589 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 1 idx 1)) #("     Tasks.org<dox>           374 Org              ~/dox/OrgFiles/Tasks.org" 0 75 (ivy-index 1 idx 1)) #("     init.el                11401 ELisp/d          ~/.config/emacs/init.el" 0 74 (ivy-index 2 idx 2))))
(setq minibuffer-history '("240" "hook" "doc-view" "doc" "test" "https://reddit.com" "www.reddit.com" "reddit.com" ".el" "k" "/bin/bash" "https://bugzilla.mozilla.org/1330882" "www.youtube.com" "5" "6" "2" "test" "https://orgmode.org" "10" "7"))
(setq swiper-history '("prescient" #("prescient" 0 9 (ivy-index 2)) #(" Ivy-Prescient minor mode (no indicator):" 0 1 (swiper-line-number 980 display "980  ") 1 14 (button (t) category help-function-button help-args (ivy-prescient-mode))) "treesit" "corfu-" "history" "cape" #("corfu" 0 5 (ivy-index 29)) #("     (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))" 0 1 (swiper-line-number 700 display "700  ") 1 5 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent))) 5 6 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent))) 6 71 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent))) 71 72 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent))) 72 73 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)))) #("feed" 0 4 (ivy-index 0)) #(" *** Elfeed" 0 1 (swiper-line-number 1330 display "1330 ") 1 11 (fontified nil line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)))) #("latexmk" 0 7 (ivy-index 0)) #("     (add-hook 'TeX-after-compilation-finished-functions (lambda (filename) (shell-command \"latexmk -silent -c\")))" 0 1 (swiper-line-number 1204 display "1204 ") 1 114 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)))) "proc" "load-pa" ":mode" #(":hook" 0 5 (ivy-index 10)) #("       :hook (eshell-first-time-mode . reiki/configure-eshell)" 0 1 (swiper-line-number 1373 display "1373 ") 1 7 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 7 12 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 12 13 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 13 14 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 14 61 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 61 62 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent)))) #("org-presen" 0 10 (ivy-index 3)) #("   (use-package org-present" 0 1 (display "985  " swiper-line-number 985) 1 3 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 3 4 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 15 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 15 16 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 16 27 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (font-lock-constant-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) "org-appear-mode" #("org-present" 0 11 (ivy-index 9)) #("            (\"C-k\" . org-present-prev)" 0 1 (swiper-line-number 994 display "994  ") 1 12 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("               " 0 4 (face org-indent) 4 15 (face org-indent)) font-lock-multiline t face (org-block)) 12 13 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("               " 0 4 (face org-indent) 4 15 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 13 18 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("               " 0 4 (face org-indent) 4 15 (face org-indent)) font-lock-multiline t face (font-lock-string-face org-block)) 18 37 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("               " 0 4 (face org-indent) 4 15 (face org-indent)) font-lock-multiline t face (org-block)) 37 38 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("               " 0 4 (face org-indent) 4 15 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) #("map" 0 3 (ivy-index 35)) #("       (evil-define-key '(normal insert visual) eshell-mode-map (kbd \"C-r\") 'counsel-esh-history)" 0 1 (swiper-line-number 1355 display "1355 ") 1 7 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 7 8 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 8 23 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 23 25 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 25 26 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 26 46 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 46 47 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 47 64 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 64 65 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 65 69 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 69 74 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 74 75 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 75 96 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent))) 96 97 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent)))) #("   (use-package org-present" 0 1 (display "984  " swiper-line-number 984) 1 3 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 3 4 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 15 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 15 16 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 16 27 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t help-echo nil face (font-lock-constant-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #(":map" 0 4 (ivy-index 3))))
(setq read-number-history '("0" "1"))
(setq buffer-name-history '(#("init-new.el" 0 11 (ivy-index 0)) #("Emacs.org" 0 9 (ivy-index 0)) #("Birthdays.org" 0 13 (ivy-index 0)) #("Metrics.org" 0 11 (ivy-index 0)) #("custom-vars.el" 0 14 (ivy-index 3)) #("Journal.org" 0 11 (ivy-index 0)) #("Tasks.org<dox>" 0 14 (ivy-index 0)) #("Tasks.org" 0 9 (ivy-index 1)) #("*Org Agenda*" 0 12 (ivy-index 0)) #("test.org" 0 8 (ivy-index 0)) #("*Backtrace*" 0 11 (ivy-index 3)) #("*helpful variable: byte-cdr*" 0 28 (ivy-index 0)) #("*WoMan-Log*" 0 11 (ivy-index 7)) #("emacs" 0 5 (ivy-index 2)) #("*Help*" 0 6 (ivy-index 1)) #("*Customize Option: Scroll Margin*" 0 33 (ivy-index 0)) #("*Compile-Log*" 0 13 (ivy-index 2)) #("proofs.pdf" 0 10 (ivy-index 0)) #("*shell*" 0 7 (ivy-index 0)) #("*Messages*" 0 10 (ivy-index 0)) #("*scratch*" 0 9 (ivy-index 0)) #("proofs.tex" 0 10 (ivy-index 0)) #("init.el" 0 7 (ivy-index 0)) #("*helpful variable: backup-directory-alist*" 0 42 (ivy-index 0)) #("*Ibuffer*" 0 9 (ivy-index 0))))
(setq counsel-describe-symbol-history '(#("popup" 0 5 (ivy-index 0)) "corfu-popupinfo-delay" #("corfu-popupinfo del" 0 19 (ivy-index 0)) "corfu-popupinfo-delay" #("corfu-popup" 0 11 (ivy-index 0)) "corfu-popupinfo-hide" #("corfu-popupinfo" 0 15 (ivy-index 5)) "corfu-popupinfo-hide" "corfu-popupinfo-mode" #("corfu-echo" 0 10 (ivy-index 2)) "corfu-echo-delay" #("corfu-hi" 0 8 (ivy-index 3)) "corfu-history-length" "corfu-popupinfo-toggle" "corfu-popupinfo-mode" #("corfu" 0 5 (ivy-index 0)) "corfu-echo-mode" #("auto" 0 4 (ivy-index 0)) "auto-save-file-name-transforms" #("elfeed dir" 0 10 (ivy-index 1)) "elfeed-db-directory" #("elfeed" 0 6 (ivy-index 40)) "elfeed-enclosure-default-dir" "elfeed-db-directory" #("load-path" 0 9 (ivy-index 0)) "user-emacs-directory"))
(setq ivy-history '(#("corfu-doc-20220621.1554" 0 23 (ivy-index 1)) #("*Customize Group: Evil Collection Corfu*" 0 40 (ivy-index 3)) #("evil-collection-corfu" 0 21 (ivy-index 1)) #("*Customize Group: Corfu*" 0 24 (ivy-index 2)) #("corfu" 0 5 (ivy-index 2)) #("Emacs.org" 0 9 (ivy-index 2)) #("*Help*" 0 6 (ivy-index 1)) #("corfu-echo" 0 10 (ivy-index 1)) #("*new*" 0 5 (ivy-index 3)) #("*Messages*" 0 10 (ivy-index 1)) #("dire" 0 4 (ivy-index 2)) "dired" #("installed_programs.txt" 0 22 (ivy-index 1)) #("procress" 0 8 (ivy-index 0)) #("/home/reikimann/dox/math_collection.tex" 0 39 (ivy-index 1)) #("math_collection.tex" 0 19 (ivy-index 1)) #("/home/reikimann/dox/latex/math_collection.tex" 0 45 (ivy-index 0)) #("Emacs.org.tex" 0 13 (ivy-index 17)) #("use-package-handler/:bind" 0 25 (ivy-index 0)) #("message" 0 7 (ivy-index 0)) #("origin" 0 6 (ivy-index 0)) #("latex" 0 5 (ivy-index 2)) #("dox" 0 3 (ivy-index 6)) #("math_collection.pdf" 0 19 (ivy-index 1)) #("after-save-hook" 0 15 (ivy-index 2))))
(setq file-name-history '(#("/home/reikimann/.config/emacs/Emacs.org" 0 39 (ivy-index 0)) #("/home/reikimann/.config/" 0 24 (ivy-index 2)) #("dox" 0 3 (ivy-index 0)) #("/home/reikimann/dox/coding/git-clones/dotfiles/installed_programs.txt" 0 69 (ivy-index 0)) "~/dox/coding/git-clones/dotfiles/README.org" #("/home/reikimann/dox/coding/git-clones/dotfiles/README.org" 0 57 (ivy-index 0)) "/run/media/reikimann/backup/linux_pc_backup_2/dox/Mywiki/Dwm-patches.wiki" "/run/faillock/reikimann" #("/home/reikimann/.mozilla/firefox/lgcud8wd.default-release/" 0 58 (ivy-index 0)) #("/home/reikimann/.mozilla/firefox/lgcud8wd.default-release/pkcs11.txt" 0 68 (ivy-index 0)) #("/home/reikimann/.config/emacs/setup-files" 0 41 (ivy-index 0)) #("/home/reikimann/.config/emacs/org-files/example_latex.org" 0 57 (ivy-index 0)) #("/home/reikimann/.config/emacs/org-files/example_html.org" 0 56 (ivy-index 0)) #("/home/reikimann/.config/emacs/org-files" 0 39 (ivy-index 0)) #("/home/reikimann/dox/latex/proofs.tex" 0 36 (ivy-index 0)) #("/home/reikimann/.config/emacs/init.el" 0 37 (ivy-index 1)) #("/home/reikimann/dox/math_collection.pdf" 0 39 (ivy-index 2)) #("/home/reikimann/dox/coding/TuxDocs/CONTRIBUTING.org" 0 51 (ivy-index 1)) #("/home/reikimann/dox/coding/TuxDocs/README.html" 0 46 (ivy-index 1)) #("/home/reikimann/dox/coding/TuxDocs/README.org" 0 45 (ivy-index 0)) #("/home/reikimann/dox/math_collection.tex" 0 39 (ivy-index 0)) "/home/reikimann/dox/coding/TuxDocs/Chapter_1/README.md" "
 	math_collection.pdf                          	               	-rw-r--r--  	209.8k 	Jul 20 13:21
 	math_collection.tex                          	               	-rw-r--r--  	6.1k   	Jul 19 22:32
 	auto/                                        	               	drwxr-xr-x  	4k     	Jul 19 22:30
 	proofs.tex                                   	               	-rw-r--r--  	12.4k  	Jul 17 18:07
 	math_collection.log                          	               	-rw-r--r--  	15.5k  	Jul 20 13:21
 	.git/                                        	               	drwxr-xr-x  	4k     	Jul 20 13:21
 	grundlæggende_regneteknik.pdf                	               	-rw-r--r--  	172.5k 	Jun 16 14:04
 	grundlæggende_regneteknik.tex                	               	-rw-r--r--  	3.7k   	Jun 16 14:04
 	proofs.pdf                                   	               	-rw-r--r--  	243.1k 	Jun 27 15:01" #("/home/reikimann/dox/latex/math_collection.pdf" 0 45 (ivy-index 1))))
(setq yes-or-no-p-history '("yes" "no" "yes"))
(setq counsel-M-x-history '("corfu-popupinfo-scroll-down" "corfu-history-mode" #("packages" 0 8 (ivy-index 1)) "list-packages" #("corfu ech" 0 9 (ivy-index 0)) "corfu-echo-mode" #("buffer new" 0 10 (ivy-index 0)) "evil-buffer-new" #("corfu info" 0 10 (ivy-index 1)) "corfu-popupinfo-mode" #("dired-up" 0 8 (ivy-index 0)) "dired-up-directory" #("counsel-dired" 0 13 (ivy-index 2)) #("dired-do-rename" 0 15 (ivy-index 2)) #("counsel-dired-jump" 0 18 (ivy-index 0)) #("coun dire" 0 9 (ivy-index 3)) #("counsel dired" 0 13 (ivy-index 1)) #("dired" 0 5 (ivy-index 40)) #("dired$" 0 6 (ivy-index 0)) #("elfe" 0 4 (ivy-index 0)) "elfeed" #("org-link" 0 8 (ivy-index 0)) "counsel-org-link" #("doom-modeline-mode" 0 18 (ivy-index 0)) #("doom" 0 4 (ivy-index 0))))
(setq evil-ex-history '(#("q" 0 1 (ex-index 1)) #("dired" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1))))
(setq tablist-named-filter 'nil)
(setq evil-jumps-history '((22872 "/home/reikimann/.config/emacs/Emacs.org") (24352 "/home/reikimann/.config/emacs/Emacs.org") (24715 "/home/reikimann/.config/emacs/Emacs.org") (24717 "/home/reikimann/.config/emacs/Emacs.org") (24715 "/home/reikimann/.config/emacs/Emacs.org")))
